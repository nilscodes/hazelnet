openapi: 3.0.0
info:
  version: '0.0.1'
  title: 'HazelNet Cardano Connect'
servers:
  - url: 'localhost:8086'
paths:
  /wallets/{walletAddress}:
    get:
      summary: 'Returns address details for a given wallet address'
      operationId: walletInfo
      tags:
        - wallets
      parameters:
        - $ref: '#/components/parameters/WalletAddressPathParameter'
      responses:
        '200':
          description: 'Address details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressDetails'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /wallets/{walletAddress}/assets/{policyId}:
    get:
      summary: 'Returns all assets of a policy in a specific wallet address'
      operationId: walletAssets
      tags:
        - wallets
        - token
      parameters:
        - $ref: '#/components/parameters/WalletAddressPathParameter'
        - $ref: '#/components/parameters/PolicyIdPathParameter'
      responses:
        '200':
          description: 'A filtered list of token policies and associated asset names currently owned by the wallet address'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenOwnershipInfoWithAssetList'
  /wallets/{walletAddress}/handles:
    get:
      summary: 'Returns all handles in a specific wallet address'
      operationId: walletHandles
      tags:
        - wallets
        - handles
      parameters:
        - $ref: '#/components/parameters/WalletAddressPathParameter'
      responses:
        '200':
          description: 'A list of handles currently owned by the wallet address'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Handle'
  /handles/{handleName}:
    get:
      summary: 'Resolve a an ADA handle to an address, if possible'
      operationId: resolveHandle
      tags:
        - handles
        - addresses
      parameters:
        - name: handleName
          in: path
          description: The handle name to details retrieve for
          required: true
          style: simple
          schema:
            type: string
            example: hazelnet
      responses:
        '200':
          description: 'Handle details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Handle'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /verification/{walletAddress}:
    get:
      summary: 'Verify if a transaction with a given amount has been done to this address from the same wallet'
      operationId: verifyWalletAddress
      tags:
        - verification
      parameters:
        - name: walletAddress
          in: path
          description: The wallet address (Byron or Shelley era) to verify
          required: true
          style: simple
          schema:
            type: string
            example: 1
        - name: verificationAmount
          in: query
          description: The amount that has to have been sent to the address to verify
          required: true
          schema:
            type: number
            format: int64
            example: 1
        - name: earliestBlockTime
          in: query
          description: The earliest block time to consider for transaction with this amount
          required: true
          schema:
            type: string
            format: date-time
            example: 2021-11-10T13:20:57Z
      responses:
        '200':
          description: 'Sample response: Details about a user by ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /stakepools:
    get:
      summary: Get a list of stakepools, optionally filtered by parameters
      operationId: listStakepools
      tags:
        - stakepools
      parameters:
        - name: poolView
          in: query
          description: The pool view string to resolve search the pool by
          required: false
          schema:
            $ref: '#/components/schemas/StakepoolView'
        - name: poolHash
          in: query
          description: The pool hash string to resolve search the pool by
          required: false
          schema:
            $ref: '#/components/schemas/StakepoolHash'
      responses:
        '200':
          description: 'A list of pools'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StakepoolInfo'
  /stakepools/{poolHash}/delegation:
    get:
      summary: Get the active delegation (i.e. current delegation) of a pool for a given epoch
      operationId: getActiveDelegation
      tags:
        - stakepools
      parameters:
        - $ref: '#/components/parameters/PoolHashPathParameter'
        - name: withoutAmount
          in: query
          description: 'If set to true, data can be retrieved without requiring stake amounts. Defaults to false if omitted.'
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: 'A list of all active delegations'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DelegationInfo'
  /stakepools/{poolHash}/delegation/{epochNo}:
    get:
      summary: Get the delegation (i.e. delegation snapshot) of a pool for a given epoch
      operationId: getDelegationInEpoch
      tags:
        - stakepools
      parameters:
        - $ref: '#/components/parameters/PoolHashPathParameter'
        - $ref: '#/components/parameters/EpochNumberPathParameter'
      responses:
        '200':
          description: 'A list of delegations at the snapshot time'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DelegationInfo'
  /token/stake:
    post:
      summary: Get the policy IDs and token counts that currently reside in all stake addresses, for the policy IDs/fingerprint combinations in the body
      operationId: getMultiAssetCountStakeSnapshot
      tags:
        - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenPolicyIdListWithOptionalAssetFingerprint'
      responses:
        '200':
          description: 'A filtered list of token policies and associated counts currently owned by the stake address'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenOwnershipInfoWithAssetCount'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /token/stake/{stakeAddress}:
    post:
      summary: Get the policy IDs and token counts that currently reside in a stake address, filtered by the policy IDs in the body (or all, if empty list)
      operationId: getMultiAssetCountsForStakeAddress
      tags:
        - token
      parameters:
        - $ref: '#/components/parameters/StakeAddressPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyIdsAndExcludedAssets'
      responses:
        '200':
          description: 'A filtered list of token policies and associated counts currently owned by the stake address'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenOwnershipInfoWithAssetCount'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /token/stake/{stakeAddress}/besthandle:
    get:
      summary: 'Find the most distinctive handle belonging to a stake address'
      operationId: findBestHandleForStakeAddress
      tags:
        - handles
        - addresses
        - token
      parameters:
        - $ref: '#/components/parameters/StakeAddressPathParameter'
      responses:
        '200':
          description: 'Handle details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Handle'
  /token/stake/{stakeAddress}/handles:
    get:
      summary: 'Find all handles belonging to a stake address. Does not resolve the handles for the list!'
      operationId: findHandlesForStakeAddress
      tags:
        - handles
        - addresses
        - token
      parameters:
        - $ref: '#/components/parameters/StakeAddressPathParameter'
      responses:
        '200':
          description: 'Handle details'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Handle'
  /token/stake/{stakeAddress}/assets:
    post:
      summary: Get the policy IDs and token names that currently reside in a stake address, filtered by the policy IDs in the body (or all, if empty list)
      operationId: getMultiAssetListForStakeAddress
      tags:
        - token
      parameters:
        - $ref: '#/components/parameters/StakeAddressPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenPolicyIdListWithOptionalAssetFingerprint'
      responses:
        '200':
          description: 'A filtered list of token policies and associated asset names currently owned by the stake address'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenOwnershipInfoWithAssetList'
  /token/policies/{policyId}:
    get:
      summary: Get information about this policy
      operationId: getPolicyInfo
      tags:
        - token
      parameters:
        - $ref: '#/components/parameters/PolicyIdPathParameter'
      responses:
        '200':
          description: 'The token count and other policy related info'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyInfo'
  /token/assets/{policyId}/{assetNameHex}:
    get:
      summary: Get the information and metadata for a multi asset
      operationId: getMultiAssetInfo
      tags:
        - token
      parameters:
        - $ref: '#/components/parameters/PolicyIdPathParameter'
        - $ref: '#/components/parameters/AssetNameHexPathParameter'
      responses:
        '200':
          description: 'The data and metadata for this asset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiAssetInfo'
  /token/fingerprints/{assetFingerprint}:
    get:
      summary: Get the information and metadata for a multi asset by fingerprint
      operationId: getMultiAssetInfoForAssetFingerprint
      tags:
        - token
      parameters:
        - $ref: '#/components/parameters/AssetFingerprintPathParameter'
      responses:
        '200':
          description: 'The data and metadata for this asset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiAssetInfo'
  /token/fingerprints/{assetFingerprint}/wallet:
    get:
      summary: Get the wallet this multi asset resides in
      operationId: getWalletForAsset
      tags:
        - token
        - wallets
      parameters:
        - $ref: '#/components/parameters/AssetFingerprintPathParameter'
      responses:
        '200':
          description: 'The wallet info associated with this asset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletAddress'
  /info/syncstatus:
    get:
      summary: 'Get Synchronization details for Cardano-DB-Sync connected to this HazelNet'
      operationId: syncStatus
      tags:
        - info
      responses:
        '200':
          description: 'Synchronization Information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncStatus'
  /info/epochdetails:
    get:
      summary: 'Get Epoch Details'
      operationId: epochDetails
      tags:
        - info
      responses:
        '200':
          description: 'Information about the current epoch'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EpochDetails'
components:
  parameters:
    WalletAddressPathParameter:
      name: walletAddress
      in: path
      description: The wallet address (Byron or Shelley era) to retrieve details for
      required: true
      style: simple
      example: addr1qxpc4jfv5qvcr3plf046u365urrmlcthqrpp34p3445lfu3wejzsmqmaqlupfs6v2cmnh868t6vrjljtj6u43wg6w6zs6v20aa
      schema:
        type: string
        example: 1
    PoolHashPathParameter:
      name: poolHash
      in: path
      description: The Stakepool hash
      required: true
      style: simple
      example: be80794a946cf5e578846fc81e3c62ac13f4ab3335e0f5dc046edad4
      schema:
        $ref: '#/components/schemas/StakepoolHash'
    PolicyIdPathParameter:
      name: policyId
      in: path
      description: The policy ID
      required: true
      style: simple
      example: ceb5dedd6cda3f0b4a98919b5d3827e15e324771642b57e0e6aabd57
      schema:
        $ref: '#/components/schemas/TokenPolicyId'
    AssetFingerprintPathParameter:
      name: assetFingerprint
      in: path
      description: The bech32 encoded asset fingerprint
      required: true
      style: simple
      schema:
        $ref: '#/components/schemas/AssetFingerprint'
    AssetNameHexPathParameter:
      name: assetNameHex
      in: path
      description: The hex-encoded name of the asset
      required: true
      style: simple
      example: 4d616368696e65486561647a373536
      schema:
        $ref: '#/components/schemas/TokenAssetName'
    StakeAddressPathParameter:
      name: stakeAddress
      in: path
      description: The staking address of a wallet in view format
      required: true
      style: simple
      schema:
        $ref: '#/components/schemas/StakeAddressView'
    EpochNumberPathParameter:
      name: epochNo
      in: path
      description: The epoch number
      required: true
      style: simple
      example: 309
      schema:
        $ref: '#/components/schemas/EpochNumber'
  schemas:
    AddressDetails:
      type: object
      properties:
        stakeAddress:
          $ref: '#/components/schemas/StakeAddressView'
    Handle:
      type: object
      properties:
        handle:
          $ref: '#/components/schemas/HandleName'
        address:
          $ref: '#/components/schemas/WalletAddress'
        resolved:
          type: boolean
    StakepoolInfo:
      type: object
      required:
        - hash
        - view
        - ticker
        - name
      properties:
        hash:
          type: string
          pattern: '^[_A-Z0-9]{56}$'
        view:
          type: string
        ticker:
          type: string
        name:
          type: string
        website:
          type: string
        description:
          type: string
    DelegationInfo:
      type: object
      required:
        - poolHash
        - amount
        - stakeAddress
      properties:
        poolHash:
          $ref: '#/components/schemas/StakepoolHash'
        amount:
          type: integer
          format: int64
        stakeAddress:
          $ref: '#/components/schemas/StakeAddressView'
    TokenOwnershipInfoWithAssetCount:
      type: object
      required:
        - stakeAddress
        - policyId
        - assetCount
      properties:
        stakeAddress:
          $ref: '#/components/schemas/StakeAddressView'
        policyId:
          $ref: '#/components/schemas/TokenPolicyId'
        assetCount:
          type: integer
          format: int64
    TokenOwnershipInfoWithAssetList:
      type: object
      required:
        - policyId
        - assetCount
      properties:
        stakeAddress:
          $ref: '#/components/schemas/StakeAddressView'
        walletAddress:
          $ref: '#/components/schemas/WalletAddress'
        policyId:
          $ref: '#/components/schemas/TokenPolicyId'
        assetList:
          type: array
          items:
            $ref: '#/components/schemas/TokenAssetName'
    MultiAssetInfo:
      type: object
      required:
        - policyId
        - assetName
        - assetFingerprint
        - metadata
        - mintTransaction
        - quantity
      properties:
        policyId:
          $ref: '#/components/schemas/TokenPolicyId'
        assetName:
          type: string
        assetFingerprint:
          $ref: '#/components/schemas/AssetFingerprint'
        metadata:
          type: object
        mintTransaction:
          type: string
        quantity:
          type: integer
          format: int64
    SyncStatus:
      type: object
      required:
        - currentEpoch
        - lastSyncSeconds
        - name
      properties:
        currentEpoch:
          type: integer
          format: int32
        lastSyncSeconds:
          type: integer
          format: int64
        syncPercentage:
          type: number
          format: double
    EpochDetails:
      type: object
      required:
        - epochNo
        - secondsAchieved
        - estimatedSecondsLeft
        - blockCount
        - transactionCount
        - fees
        - outSum
        - startTime
      properties:
        epochNo:
          type: integer
          format: int32
        secondsAchieved:
          type: integer
          format: int64
        estimatedSecondsLeft:
          type: integer
          format: int64
        blockCount:
          type: integer
          format: int32
        transactionCount:
          type: integer
          format: int32
        fees:
          type: integer
          format: int64
        outSum:
          type: integer
          format: int64
        startTime:
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
    PolicyInfo:
      type: object
      required:
        - policyId
        - tokenCount
      properties:
        policyId:
          $ref: '#/components/schemas/TokenPolicyId'
        tokenCount:
          type: integer
          format: int64
    PolicyIdsAndExcludedAssets:
      type: object
      required:
        - policyIds
      properties:
        policyIdsWithOptionalAssetFingerprint:
          $ref: '#/components/schemas/TokenPolicyIdListWithOptionalAssetFingerprint'
        excludedAssetFingerprints:
          type: array
          items:
            $ref: '#/components/schemas/AssetFingerprint'
    TokenPolicyIdListWithOptionalAssetFingerprint:
      type: array
      items:
        $ref: '#/components/schemas/TokenPolicyIdWithOptionalAssetFingerprint'
    HandleName:
      type: string
      example: hazelnet
      pattern: '^[-._a-zA-Z0-9]{1,15}$'
    WalletAddress:
      type: string
      description: The wallet address (non-enterprise)
      example: addr1qxpc4jfv5qvcr3plf046u365urrmlcthqrpp34p3445lfu3wejzsmqmaqlupfs6v2cmnh868t6vrjljtj6u43wg6w6zs6v20aa
      pattern: '^addr1[A-Za-z-0-9]{98}$'
    StakepoolHash:
      type: string
      description: The Stakepool hash
      example: be80794a946cf5e578846fc81e3c62ac13f4ab3335e0f5dc046edad4
      pattern: '^[_A-Za-z0-9]{56}$'
    StakeAddressView:
      type: string
      description: The staking address of a wallet, in viewable format
      example: stake1uyhvepgdsd7s07q5cdx9vdemnar4axpe0e9edw2chyd8dpgqnsffq
      pattern: '^stake1[a-zA-Z0-9]{53}$'
    StakepoolView:
      type: string
      description: The pool ID, in viewable format
      example: pool1h5jtxde8j86qrnqzj32ugn480u7gw5xw8wqy5d227rl3vfg58qz
      pattern: '^pool1[a-zA-Z0-9]{51}$'
    TokenPolicyId:
      type: string
      description: The Policy ID
      example: ceb5dedd6cda3f0b4a98919b5d3827e15e324771642b57e0e6aabd57
      pattern: '^[A-Za-z0-9]{56}$'
    TokenAssetName:
      type: string
      description: The hex-encoded asset name
      example: 4d616368696e65486561647a373536
      pattern: '^[A-Za-z0-9]*$'
    TokenPolicyIdWithOptionalAssetFingerprint:
      type: string
      description: The Policy ID with an optional asset fingerprint appended
      example: ceb5dedd6cda3f0b4a98919b5d3827e15e324771642b57e0e6aabd57asset1ls9tt8s03x2gcqjyppx346ct64jts7fnwsmequ
      pattern: '^[A-Za-z0-9]{56}(asset1[A-Za-z-0-9]{38})?$'
    AssetFingerprint:
      type: string
      description: The fingerprint of an asset
      example: asset1ls9tt8s03x2gcqjyppx346ct64jts7fnwsmequ
      pattern: '^asset1[A-Za-z-0-9]{38}$'
    AssetName:
      type: string
      description: The name of an asset
      example: PXL500
    EpochNumber:
      type: integer
      format: int32
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string