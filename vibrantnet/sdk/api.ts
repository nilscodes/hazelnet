/* tslint:disable */
/* eslint-disable */
/**
 * HazelNet External
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AnonymousPhysicalOrder
 */
export interface AnonymousPhysicalOrder {
    /**
     * 
     * @type {number}
     * @memberof AnonymousPhysicalOrder
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AnonymousPhysicalOrder
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof AnonymousPhysicalOrder
     */
    'zipCode': string;
    /**
     * 
     * @type {string}
     * @memberof AnonymousPhysicalOrder
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof AnonymousPhysicalOrder
     */
    'street': string;
    /**
     * 
     * @type {Array<AnonymousPhysicalOrderItem>}
     * @memberof AnonymousPhysicalOrder
     */
    'items': Array<AnonymousPhysicalOrderItem>;
    /**
     * 
     * @type {boolean}
     * @memberof AnonymousPhysicalOrder
     */
    'processed'?: boolean;
}
/**
 * 
 * @export
 * @interface AnonymousPhysicalOrderItem
 */
export interface AnonymousPhysicalOrderItem {
    /**
     * 
     * @type {number}
     * @memberof AnonymousPhysicalOrderItem
     */
    'productId': number;
    /**
     * 
     * @type {number}
     * @memberof AnonymousPhysicalOrderItem
     */
    'count': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const BlockchainType = {
    Cardano: 'CARDANO',
    Ethereum: 'ETHEREUM'
} as const;

export type BlockchainType = typeof BlockchainType[keyof typeof BlockchainType];


/**
 * 
 * @export
 * @interface ErrorMessage
 */
export interface ErrorMessage {
    /**
     * 
     * @type {string}
     * @memberof ErrorMessage
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ErrorMessage
     */
    'sourceField'?: string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {Array<ErrorMessage>}
     * @memberof ErrorResponse
     */
    'messages': Array<ErrorMessage>;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'httpStatus': string;
    /**
     * 
     * @type {number}
     * @memberof ErrorResponse
     */
    'httpStatusCode': number;
}
/**
 * 
 * @export
 * @interface PhysicalProduct
 */
export interface PhysicalProduct {
    /**
     * 
     * @type {number}
     * @memberof PhysicalProduct
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PhysicalProduct
     */
    'name': string;
    /**
     * 
     * @type {object}
     * @memberof PhysicalProduct
     */
    'variations'?: object;
}
/**
 * 
 * @export
 * @interface SharedWhitelist
 */
export interface SharedWhitelist {
    /**
     * 
     * @type {number}
     * @memberof SharedWhitelist
     */
    'guildId': number;
    /**
     * 
     * @type {string}
     * @memberof SharedWhitelist
     */
    'guildName': string;
    /**
     * 
     * @type {string}
     * @memberof SharedWhitelist
     */
    'whitelistDisplayName': string;
    /**
     * 
     * @type {string}
     * @memberof SharedWhitelist
     */
    'whitelistName': string;
    /**
     * 
     * @type {Array<WhitelistSignup>}
     * @memberof SharedWhitelist
     */
    'signups': Array<WhitelistSignup>;
}
/**
 * 
 * @export
 * @interface WhitelistSignup
 */
export interface WhitelistSignup {
    /**
     * 
     * @type {string}
     * @memberof WhitelistSignup
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof WhitelistSignup
     */
    'signupTime'?: string;
}

/**
 * ClaimsApi - axios parameter creator
 * @export
 */
export const ClaimsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get orders for a claim list
         * @param {string} claimListName The name of this claim list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClaimListOrders: async (claimListName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'claimListName' is not null or undefined
            assertParamExists('getClaimListOrders', 'claimListName', claimListName)
            const localVarPath = `/community/claimlists/{claimListName}/orders`
                .replace(`{${"claimListName"}}`, encodeURIComponent(String(claimListName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get products for a claim list
         * @param {string} claimListName The name of this claim list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClaimListProducts: async (claimListName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'claimListName' is not null or undefined
            assertParamExists('getClaimListProducts', 'claimListName', claimListName)
            const localVarPath = `/community/claimlists/{claimListName}/products`
                .replace(`{${"claimListName"}}`, encodeURIComponent(String(claimListName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClaimsApi - functional programming interface
 * @export
 */
export const ClaimsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClaimsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get orders for a claim list
         * @param {string} claimListName The name of this claim list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClaimListOrders(claimListName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnonymousPhysicalOrder>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClaimListOrders(claimListName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get products for a claim list
         * @param {string} claimListName The name of this claim list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClaimListProducts(claimListName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PhysicalProduct>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClaimListProducts(claimListName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClaimsApi - factory interface
 * @export
 */
export const ClaimsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClaimsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get orders for a claim list
         * @param {string} claimListName The name of this claim list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClaimListOrders(claimListName: string, options?: any): AxiosPromise<Array<AnonymousPhysicalOrder>> {
            return localVarFp.getClaimListOrders(claimListName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get products for a claim list
         * @param {string} claimListName The name of this claim list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClaimListProducts(claimListName: string, options?: any): AxiosPromise<Array<PhysicalProduct>> {
            return localVarFp.getClaimListProducts(claimListName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClaimsApi - object-oriented interface
 * @export
 * @class ClaimsApi
 * @extends {BaseAPI}
 */
export class ClaimsApi extends BaseAPI {
    /**
     * 
     * @summary Get orders for a claim list
     * @param {string} claimListName The name of this claim list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClaimsApi
     */
    public getClaimListOrders(claimListName: string, options?: AxiosRequestConfig) {
        return ClaimsApiFp(this.configuration).getClaimListOrders(claimListName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get products for a claim list
     * @param {string} claimListName The name of this claim list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClaimsApi
     */
    public getClaimListProducts(claimListName: string, options?: AxiosRequestConfig) {
        return ClaimsApiFp(this.configuration).getClaimListProducts(claimListName, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DiscordApi - axios parameter creator
 * @export
 */
export const DiscordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get orders for a claim list
         * @param {string} claimListName The name of this claim list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClaimListOrders: async (claimListName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'claimListName' is not null or undefined
            assertParamExists('getClaimListOrders', 'claimListName', claimListName)
            const localVarPath = `/community/claimlists/{claimListName}/orders`
                .replace(`{${"claimListName"}}`, encodeURIComponent(String(claimListName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get products for a claim list
         * @param {string} claimListName The name of this claim list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClaimListProducts: async (claimListName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'claimListName' is not null or undefined
            assertParamExists('getClaimListProducts', 'claimListName', claimListName)
            const localVarPath = `/community/claimlists/{claimListName}/products`
                .replace(`{${"claimListName"}}`, encodeURIComponent(String(claimListName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get signups for all shared whitelists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharedWhitelistSignups: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/community/whitelists/shared`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get signups for a whitelist
         * @param {string} whitelistName The name of this whitelist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhitelistSignups: async (whitelistName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'whitelistName' is not null or undefined
            assertParamExists('getWhitelistSignups', 'whitelistName', whitelistName)
            const localVarPath = `/community/whitelists/{whitelistName}/signups`
                .replace(`{${"whitelistName"}}`, encodeURIComponent(String(whitelistName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DiscordApi - functional programming interface
 * @export
 */
export const DiscordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DiscordApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get orders for a claim list
         * @param {string} claimListName The name of this claim list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClaimListOrders(claimListName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnonymousPhysicalOrder>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClaimListOrders(claimListName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get products for a claim list
         * @param {string} claimListName The name of this claim list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClaimListProducts(claimListName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PhysicalProduct>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClaimListProducts(claimListName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get signups for all shared whitelists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSharedWhitelistSignups(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SharedWhitelist>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSharedWhitelistSignups(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get signups for a whitelist
         * @param {string} whitelistName The name of this whitelist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWhitelistSignups(whitelistName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WhitelistSignup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWhitelistSignups(whitelistName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DiscordApi - factory interface
 * @export
 */
export const DiscordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DiscordApiFp(configuration)
    return {
        /**
         * 
         * @summary Get orders for a claim list
         * @param {string} claimListName The name of this claim list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClaimListOrders(claimListName: string, options?: any): AxiosPromise<Array<AnonymousPhysicalOrder>> {
            return localVarFp.getClaimListOrders(claimListName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get products for a claim list
         * @param {string} claimListName The name of this claim list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClaimListProducts(claimListName: string, options?: any): AxiosPromise<Array<PhysicalProduct>> {
            return localVarFp.getClaimListProducts(claimListName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get signups for all shared whitelists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharedWhitelistSignups(options?: any): AxiosPromise<Array<SharedWhitelist>> {
            return localVarFp.getSharedWhitelistSignups(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get signups for a whitelist
         * @param {string} whitelistName The name of this whitelist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhitelistSignups(whitelistName: string, options?: any): AxiosPromise<Array<WhitelistSignup>> {
            return localVarFp.getWhitelistSignups(whitelistName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DiscordApi - object-oriented interface
 * @export
 * @class DiscordApi
 * @extends {BaseAPI}
 */
export class DiscordApi extends BaseAPI {
    /**
     * 
     * @summary Get orders for a claim list
     * @param {string} claimListName The name of this claim list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscordApi
     */
    public getClaimListOrders(claimListName: string, options?: AxiosRequestConfig) {
        return DiscordApiFp(this.configuration).getClaimListOrders(claimListName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get products for a claim list
     * @param {string} claimListName The name of this claim list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscordApi
     */
    public getClaimListProducts(claimListName: string, options?: AxiosRequestConfig) {
        return DiscordApiFp(this.configuration).getClaimListProducts(claimListName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get signups for all shared whitelists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscordApi
     */
    public getSharedWhitelistSignups(options?: AxiosRequestConfig) {
        return DiscordApiFp(this.configuration).getSharedWhitelistSignups(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get signups for a whitelist
     * @param {string} whitelistName The name of this whitelist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscordApi
     */
    public getWhitelistSignups(whitelistName: string, options?: AxiosRequestConfig) {
        return DiscordApiFp(this.configuration).getWhitelistSignups(whitelistName, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WhitelistApi - axios parameter creator
 * @export
 */
export const WhitelistApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get signups for all shared whitelists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharedWhitelistSignups: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/community/whitelists/shared`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get signups for a whitelist
         * @param {string} whitelistName The name of this whitelist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhitelistSignups: async (whitelistName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'whitelistName' is not null or undefined
            assertParamExists('getWhitelistSignups', 'whitelistName', whitelistName)
            const localVarPath = `/community/whitelists/{whitelistName}/signups`
                .replace(`{${"whitelistName"}}`, encodeURIComponent(String(whitelistName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WhitelistApi - functional programming interface
 * @export
 */
export const WhitelistApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WhitelistApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get signups for all shared whitelists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSharedWhitelistSignups(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SharedWhitelist>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSharedWhitelistSignups(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get signups for a whitelist
         * @param {string} whitelistName The name of this whitelist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWhitelistSignups(whitelistName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WhitelistSignup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWhitelistSignups(whitelistName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WhitelistApi - factory interface
 * @export
 */
export const WhitelistApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WhitelistApiFp(configuration)
    return {
        /**
         * 
         * @summary Get signups for all shared whitelists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharedWhitelistSignups(options?: any): AxiosPromise<Array<SharedWhitelist>> {
            return localVarFp.getSharedWhitelistSignups(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get signups for a whitelist
         * @param {string} whitelistName The name of this whitelist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhitelistSignups(whitelistName: string, options?: any): AxiosPromise<Array<WhitelistSignup>> {
            return localVarFp.getWhitelistSignups(whitelistName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WhitelistApi - object-oriented interface
 * @export
 * @class WhitelistApi
 * @extends {BaseAPI}
 */
export class WhitelistApi extends BaseAPI {
    /**
     * 
     * @summary Get signups for all shared whitelists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhitelistApi
     */
    public getSharedWhitelistSignups(options?: AxiosRequestConfig) {
        return WhitelistApiFp(this.configuration).getSharedWhitelistSignups(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get signups for a whitelist
     * @param {string} whitelistName The name of this whitelist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhitelistApi
     */
    public getWhitelistSignups(whitelistName: string, options?: AxiosRequestConfig) {
        return WhitelistApiFp(this.configuration).getWhitelistSignups(whitelistName, options).then((request) => request(this.axios, this.basePath));
    }
}


