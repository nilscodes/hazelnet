openapi: 3.0.0
info:
  version: '0.0.1'
  title: 'HazelNet Community'
servers:
  - url: 'localhost:8085'

paths:
  /settings:
    get:
      summary: List all global settings
      operationId: getGlobalSettings
      tags:
        - global
      responses:
        '200':
          description: 'All Global Settings'
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /settings/{settingName}:
    put:
      summary: Create or update a setting
      operationId: updateGlobalSetting
      tags:
        - global
      parameters:
        - $ref: '#/components/parameters/SettingNamePathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalSetting'
      responses:
        '200':
          description: 'Updated setting'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalSetting'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: 'Delete Global Setting by Name'
      operationId: deleteGlobalSetting
      tags:
        - global
      parameters:
        - $ref: '#/components/parameters/SettingNamePathParameter'
      responses:
        '204':
          description: 'Successful deletion'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /accounts:
    post:
      summary: 'Create an Account'
      operationId: createAccount
      tags:
        - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '201':
          description: 'Account data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
  /accounts/{accountId}/settings/{settingName}:
    put:
      summary: Create or update an account setting with the provided value
      operationId: updateSetting
      tags:
        - account
      parameters:
        - $ref: '#/components/parameters/AccountIdPathParameter'
        - $ref: '#/components/parameters/SettingNamePathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddableSetting'
      responses:
        '200':
          description: 'Token Policy'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddableSetting'
    delete:
      summary: 'Delete account setting by Name'
      operationId: deleteSetting
      tags:
        - account
      parameters:
        - $ref: '#/components/parameters/AccountIdPathParameter'
        - $ref: '#/components/parameters/SettingNamePathParameter'
      responses:
        '204':
          description: 'Successful deletion'
  /externalaccounts:
    post:
      summary: 'Create External Account'
      operationId: createExternalAccount
      tags:
        - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalAccount'
      responses:
        '201':
          description: 'External account data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccount'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /externalaccounts/{externalAccountId}:
    get:
      summary: 'Get Account'
      operationId: getExternalAccount
      tags:
        - account
      parameters:
        - $ref: '#/components/parameters/ExternalAccountPathParameter'
      responses:
        '200':
          description: 'External Account Info'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccount'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /externalaccounts/{externalAccountId}/verifications:
    get:
      summary: 'Get Verifications for this specific account'
      operationId: getExternalAccountVerifications
      tags:
        - account
        - verification
      parameters:
        - $ref: '#/components/parameters/ExternalAccountPathParameter'
      responses:
        '200':
          description: 'List of all completed and outstanding verifications for this user'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Verification'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /externalaccounts/{externalAccountId}/pings:
    get:
      summary: 'Get pings for this specific account (sent and received)'
      operationId: getExternalAccountPings
      tags:
        - account
        - ping
      parameters:
        - $ref: '#/components/parameters/ExternalAccountPathParameter'
      responses:
        '200':
          description: 'List of all pings (sent and received) for this user'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalAccountPing'
  /externalaccounts/{externalAccountId}/pings/{pingId}:
    patch:
      summary: 'Update a specific ping the user is a sender or recipient of'
      operationId: updateExternalAccountPing
      tags:
        - account
        - ping
      parameters:
        - $ref: '#/components/parameters/ExternalAccountPathParameter'
        - $ref: '#/components/parameters/PingIdPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalAccountPingPartial'
      responses:
        '200':
          description: 'The updated ping object'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccountPing'
  /externalaccounts/{externalAccountId}/whitelists:
    get:
      summary: 'Get whitelists this specific account is signed up for'
      operationId: getExternalAccountWhitelists
      tags:
        - account
        - ping
      parameters:
        - $ref: '#/components/parameters/ExternalAccountPathParameter'
      responses:
        '200':
          description: 'List of all whitelists this user is signed up for'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SummarizedWhitelistSignup'
  /externalaccounts/{externalAccountId}/premium:
    get:
      summary: 'Get Premium data for this specific account'
      operationId: getPremiumInfo
      tags:
        - account
        - premium
      parameters:
        - $ref: '#/components/parameters/ExternalAccountPathParameter'
      responses:
        '200':
          description: 'List of premium status, total delegation etc.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalAccountPremiumInfo'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /externalaccounts/{externalAccountId}/import:
    post:
      summary: 'Import any outstanding verifications from other systems for this user'
      operationId: importExternalVerifications
      tags:
        - account
        - verification
      parameters:
        - $ref: '#/components/parameters/ExternalAccountPathParameter'
      responses:
        '200':
          description: 'List of imported verifications, if any, empty list otherwise.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VerificationImport'
  /externalaccounts/{externalAccountId}/account:
    put:
      summary: 'Get or create a main account for this external account'
      operationId: setAccountForExternalAccount
      tags:
        - account
      parameters:
        - $ref: '#/components/parameters/ExternalAccountPathParameter'
      responses:
        '200':
          description: 'The existing account associated with this external account, or the newly created account'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /externalaccounts/discord/{discordUserId}:
    get:
      summary: Get external account matching a Discord user ID
      operationId: getExternalAccountForDiscordUser
      tags:
        - account
      parameters:
        - $ref: '#/components/parameters/DiscordUserIdPathParameter'
      responses:
        '200':
          description: 'External Account Info that was created or matching existing external account'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccount'
        '404':
          description: No external account found for this Discord user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: 'Create/Retrieve External account for Discord user'
      operationId: setExternalAccountForDiscordUser
      tags:
        - account
      parameters:
        - $ref: '#/components/parameters/DiscordUserIdPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalAccount'
      responses:
        '200':
          description: 'External Account Info that was created or matching existing external account'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccount'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /verifications:
    post:
      summary: 'Request Verification for an External Account'
      operationId: requestVerification
      tags:
        - verification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationRequest'
      responses:
        '201':
          description: 'Verification details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Verification'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /snapshots/stake:
    post:
      summary: 'Schedule a token snapshot'
      operationId: scheduleSnapshot
      tags:
        - snapshot
        - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiAssetSnapshot'
      responses:
        '201':
          description: 'Snapshot details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiAssetSnapshot'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /verifications/{verificationId}:
    get:
      summary: 'Get Verification Info'
      operationId: getVerification
      tags:
        - account
      parameters:
        - $ref: '#/components/parameters/VerificationPathParameter'
      responses:
        '200':
          description: 'Verification Details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Verification'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: 'Delete Verification Info by ID'
      operationId: deleteVerification
      tags:
        - account
      parameters:
        - $ref: '#/components/parameters/VerificationPathParameter'
      responses:
        '204':
          description: 'Successful deletion'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /pings:
    post:
      summary: Ping another user
      operationId: addPing
      tags:
        - ping
        - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalAccountPing'
      responses:
        '201':
          description: 'The ping created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccountPing'
          headers:
            Location:
              $ref: '#/components/schemas/CreatedResponseHeader'
  /claimlists:
    post:
      summary: Add Claim List
      operationId: addClaimList
      tags:
        - claims
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClaimList'
      responses:
        '201':
          description: 'Claim List'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimList'
          headers:
            Location:
              $ref: '#/components/schemas/CreatedResponseHeader'
  /claimlists/{claimListId}:
    get:
      summary: Get Claim List
      operationId: getClaimList
      tags:
        - claims
      parameters:
        - $ref: '#/components/parameters/ClaimListIdPathParameter'
      responses:
        '200':
          description: 'Claim List'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimList'
  /claimlists/{claimListId}/orders/physical:
    get:
      summary: Get physical orders for this claim list
      operationId: listPhysicalOrders
      tags:
        - claims
      parameters:
        - $ref: '#/components/parameters/ClaimListIdPathParameter'
      responses:
        '200':
          description: 'Physical order'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhysicalOrder'
    post:
      summary: Add a physical order for this claim list
      operationId: addPhysicalOrder
      tags:
        - claims
      parameters:
        - $ref: '#/components/parameters/ClaimListIdPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhysicalOrder'
      responses:
        '201':
          description: 'Physical order'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhysicalOrder'
          headers:
            Location:
              $ref: '#/components/schemas/CreatedResponseHeader'
  /claimlists/{claimListId}/orders/physical/{orderId}:
    get:
      summary: Get physical order by order ID
      operationId: getPhysicalOrder
      tags:
        - claims
      parameters:
        - $ref: '#/components/parameters/ClaimListIdPathParameter'
        - $ref: '#/components/parameters/OrderIdPathParameter'
      responses:
        '200':
          description: 'Physical order'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhysicalOrder'
  /products:
    post:
      summary: Add Product
      operationId: addProduct
      tags:
        - claims
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhysicalProduct'
      responses:
        '201':
          description: 'Physical product'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhysicalProduct'
          headers:
            Location:
              $ref: '#/components/schemas/CreatedResponseHeader'
  /products/{productId}:
    get:
      summary: Get Product Info
      operationId: getProduct
      tags:
        - claims
        - products
      parameters:
        - $ref: '#/components/parameters/ProductIdPathParameter'
      responses:
        '200':
          description: 'Physical Product'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhysicalProduct'
  /discord/servers:
    get:
      summary: Get all Discord servers
      operationId: listDiscordServers
      tags:
        - discord
      responses:
        '201':
          description: 'List of Discord servers'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordServer'
    post:
      summary: Add Discord Server
      operationId: addDiscordServer
      tags:
        - discord
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscordServer'
      responses:
        '201':
          description: 'Discord Server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordServer'
          headers:
            Location:
              $ref: '#/components/schemas/CreatedResponseHeader'
  /discord/servers/{guildId}:
    get:
      summary: Get Discord Server Details
      operationId: getDiscordServer
      tags:
        - discord
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
      responses:
        '200':
          description: 'Discord Server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordServer'
    patch:
      summary: Update Discord Server
      operationId: updateDiscordServer
      tags:
        - discord
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscordServerPartial'
      responses:
        '200':
          description: 'Updated Discord Server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordServer'
  /discord/servers/{guildId}/roleassignments/delegatorroles:
    get:
      summary: Get the current set of delegator role assignments for this server
      operationId: getCurrentDelegatorRoleAssignments
      tags:
        - discord
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
      responses:
        '200':
          description: 'Role assignment list for delegation roles'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordRoleAssignment'
  /discord/servers/{guildId}/roleassignments/tokenroles:
    get:
      summary: Get the current set of token role assignments for this server
      operationId: getCurrentTokenRoleAssignments
      tags:
        - discord
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
      responses:
        '200':
          description: 'Role assignment list for token roles'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordRoleAssignment'
  /discord/servers/{guildId}/members:
    get:
      summary: Get the list of external accounts that are members of this discord server
      operationId: getExternalAccounts
      tags:
        - discord
        - account
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
      responses:
        '200':
          description: 'Discord Member List'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordMember'
    post:
      summary: Connect an external account to this discord server
      operationId: connectExternalAccount
      tags:
        - discord
        - account
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscordMember'
      responses:
        '201':
          description: 'Added discord member'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordMember'
  /discord/servers/{guildId}/members/{externalAccountId}:
    get:
      summary: Get your association details for this Discord
      operationId: getExternalAccountOnDiscord
      tags:
        - discord
        - account
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/ExternalAccountPathParameter'
      responses:
        '200':
          description: Discord member details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordMember'
    patch:
      summary: Update your association details for this Discord
      operationId: updateExternalAccountOnDiscord
      tags:
        - discord
        - account
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/ExternalAccountPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscordMemberPartial'
      responses:
        '200':
          description: Updated discord member details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordMember'
    delete:
      summary: Unlink an external account from this discord server
      operationId: disconnectExternalAccount
      tags:
        - discord
        - account
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/ExternalAccountPathParameter'
      responses:
        '204':
          description: 'Successful deletion'
  /discord/servers/{guildId}/members/{externalAccountId}/claimlists:
    get:
      summary: Get the claim lists this user is eligible for on this Discord server, and include product information they can claim
      operationId: getEligibleClaimListsOfUser
      tags:
        - discord
        - claims
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/ExternalAccountPathParameter'
      responses:
        '200':
          description: 'All claim lists this user is eligible for, including the products associated with their claims'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimListsWithProducts'
  /discord/servers/{guildId}/members/{externalAccountId}/claimlists/{claimListId}/orders:
    get:
      summary: Get any order this user might have had for the given claim list
      operationId: getOrderOfUserForClaimList
      tags:
        - discord
        - claims
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/ExternalAccountPathParameter'
        - $ref: '#/components/parameters/ClaimListIdPathParameter'
      responses:
        '200':
          description: 'This users order for this claim list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhysicalOrder'
        '404':
          description: 'No order found for this claim list and user'
    post:
      summary: Submit a new order for this claim list
      description: This will overwrite any existing orders for this claim list/user combination
      operationId: setOrderOfUserForClaimList
      tags:
        - discord
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/ExternalAccountPathParameter'
        - $ref: '#/components/parameters/ClaimListIdPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhysicalOrder'
      responses:
        '200':
          description: 'The created order for this claim list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhysicalOrder'
  /discord/servers/{guildId}/premium:
    get:
      summary: Get the information about the premium status of this server
      operationId: getPremiumInfo
      tags:
        - discord
        - premium
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
      responses:
        '200':
          description: 'Premium Info'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordServerPremiumInfo'
  /discord/servers/{guildId}/payment:
    get:
      summary: Get the current outstanding payment request, if any
      operationId: getCurrentPayment
      tags:
        - discord
        - premium
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
      responses:
        '200':
          description: 'Incoming payment info'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncomingDiscordPayment'
    post:
      summary: Submit a new incoming payment request
      operationId: requestIncomingPayment
      tags:
        - discord
        - premium
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncomingDiscordPaymentRequest'
      responses:
        '200':
          description: 'The created incoming payment'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomingDiscordPayment'
    delete:
      summary: Cancel an outstanding payment request
      operationId: cancelIncomingPayment
      tags:
        - discord
        - premium
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
      responses:
        '204':
          description: 'Successful deletion'
  /discord/servers/{guildId}/claimlists/{claimListIdOrName}/orders:
    get:
      summary: Get all orders for this claim list
      operationId: getAllOrdersForClaimList
      tags:
        - discord
        - claims
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/ClaimListIdOrNamePathParameter'
      responses:
        '200':
          description: 'List of orders'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhysicalOrder'
  /discord/servers/{guildId}/claimlists/{claimListIdOrName}/products:
    get:
      summary: Get all available products for this claim list
      operationId: getAllProductsForClaimList
      tags:
        - discord
        - claims
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/ClaimListIdOrNamePathParameter'
      responses:
        '200':
          description: 'List of products'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhysicalProduct'
  /discord/servers/{guildId}/tokenpolicies:
    post:
      summary: Add an official token policy to this discord server
      operationId: addTokenPolicy
      tags:
        - discord
        - token
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenPolicy'
      responses:
        '201':
          description: 'Token Policy'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenPolicy'
          headers:
            Location:
              $ref: '#/components/schemas/CreatedResponseHeader'
  /discord/servers/{guildId}/tokenpolicies/{policyId}:
    delete:
      summary: Remove an official token policy from this discord server
      operationId: deleteTokenPolicy
      tags:
        - discord
        - token
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/PolicyIdPathParameter'
      responses:
        '204':
          description: Successful deletion
  /discord/servers/{guildId}/stakepools:
    post:
      summary: Add an official stakepool to this discord server
      operationId: addStakepool
      tags:
        - discord
        - stakepool
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stakepool'
      responses:
        '201':
          description: 'Details of added stakepool'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stakepool'
          headers:
            Location:
              $ref: '#/components/schemas/CreatedResponseHeader'
  /discord/servers/{guildId}/stakepools/{poolHash}:
    delete:
      summary: Remove an official stakepool from this discord server
      operationId: deleteStakepool
      tags:
        - discord
        - stakepool
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/PoolHashPathParameter'
      responses:
        '204':
          description: Successful deletion
  /discord/servers/{guildId}/delegatorroles:
    post:
      summary: Add an auto-assigned role based on stakepool delegation to this discord server
      operationId: addDelegatorRole
      tags:
        - discord
        - stakepool
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscordDelegatorRole'
      responses:
        '201':
          description: 'Newly created Delegator Role'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordDelegatorRole'
          headers:
            Location:
              $ref: '#/components/schemas/CreatedResponseHeader'
  /discord/servers/{guildId}/delegatorroles/{delegatorRoleId}:
    delete:
      summary: Remove a delegator role assignment from this discord server
      operationId: deleteDelegatorRole
      tags:
        - discord
        - stakepool
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/DelegatorRoleIdPathParameter'
      responses:
        '204':
          description: Successful deletion
  /discord/servers/{guildId}/tokenroles:
    post:
      summary: Add an auto-assigned role based on token ownership to this discord server
      operationId: addTokenOwnershipRole
      tags:
        - discord
        - token
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscordTokenRole'
      responses:
        '201':
          description: 'Newly created token role'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordTokenRole'
          headers:
            Location:
              $ref: '#/components/schemas/CreatedResponseHeader'
  /discord/servers/{guildId}/tokenroles/{tokenRoleId}:
    patch:
      summary: Update a token role
      operationId: updateTokenOwnershipRole
      tags:
        - discord
        - token
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/TokenRoleIdPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscordTokenRolePartial'
      responses:
        '200':
          description: 'Updated token role'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordTokenRole'
    delete:
      summary: Remove a token role assignment from this discord server
      operationId: deleteTokenOwnershipRole
      tags:
        - discord
        - token
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/TokenRoleIdPathParameter'
      responses:
        '204':
          description: Successful deletion
  /discord/servers/{guildId}/tokenroles/{tokenRoleId}/metadatafilters:
    post:
      summary: Add a metadata filter to the designated token role
      operationId: addMetadataFilter
      tags:
        - discord
        - token
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/TokenRoleIdPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataFilter'
      responses:
        '201':
          description: 'Token Policy'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataFilter'
          headers:
            Location:
              $ref: '#/components/schemas/CreatedResponseHeader'
  /discord/servers/{guildId}/tokenroles/{tokenRoleId}/metadatafilters/{filterId}:
    delete:
      summary: Remove a metadata filter from the designated token role
      operationId: deleteMetadataFilter
      tags:
        - discord
        - token
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/TokenRoleIdPathParameter'
        - $ref: '#/components/parameters/TokenRoleFilterIdPathParameter'
      responses:
        '204':
          description: Successful deletion
  /discord/servers/{guildId}/polls:
    get:
      summary: 'Get polls for this Discord server'
      operationId: listPolls
      tags:
        - discord
        - poll
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
      responses:
        '200':
          description: 'All polls for this server'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordPoll'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a poll on this server
      operationId: addPoll
      tags:
        - discord
        - poll
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscordPoll'
      responses:
        '201':
          description: 'Poll'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordPoll'
          headers:
            Location:
              $ref: '#/components/schemas/CreatedResponseHeader'
  /discord/servers/{guildId}/polls/{pollId}:
    get:
      summary: 'Get specific poll for this Discord server'
      operationId: getPoll
      tags:
        - discord
        - poll
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/PollIdPathParameter'
      responses:
        '200':
          description: 'The poll with the specified ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordPoll'
    patch:
      summary: Update the settings and dates for this poll
      operationId: updatePoll
      tags:
        - discord
        - poll
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/PollIdPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscordPollPartial'
      responses:
        '200':
          description: 'Poll with updated details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordPoll'

    delete:
      summary: Remove a poll from this Discord server, including all verified votes, options etc.
      operationId: deletePoll
      tags:
        - discord
        - poll
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/PollIdPathParameter'
      responses:
        '204':
          description: Successful deletion
  /discord/servers/{guildId}/polls/{pollId}/votes:
    get:
      summary: 'Get votes for this poll'
      operationId: getVotesInPoll
      tags:
        - discord
        - poll
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/PollIdPathParameter'
      responses:
        '200':
          description: 'All votes for this poll'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VoteData'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /discord/servers/{guildId}/polls/{pollId}/votes/{externalAccountId}:
    get:
      summary: Get voting power and votes for this poll for a specific account
      operationId: getVoteOfUser
      tags:
        - discord
        - poll
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/PollIdPathParameter'
        - $ref: '#/components/parameters/ExternalAccountPathParameter'
      responses:
        '200':
          description: 'Vote'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteData'
    post:
      summary: Vote for a specific option
      operationId: setVoteForUser
      tags:
        - discord
        - poll
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/PollIdPathParameter'
        - $ref: '#/components/parameters/ExternalAccountPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DiscordPollOptionId'
      responses:
        '200':
          description: 'Vote data for the user and the poll'
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/VoteData'
                  poll:
                    $ref: '#/components/schemas/VoteData'
  /discord/servers/{guildId}/marketplaces/channels:
    get:
      summary: 'Get marketplace channels for this Discord server'
      operationId: listMarketplaceChannels
      tags:
        - discord
        - marketplace
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
      responses:
        '200':
          description: 'All marketplace channels for this server'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordMarketplaceChannel'
    post:
      summary: Create a marketplace channel on this server
      operationId: addMarketplaceChannel
      tags:
        - discord
        - marketplace
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscordMarketplaceChannel'
      responses:
        '201':
          description: 'A new marketplace channel object'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordMarketplaceChannel'
          headers:
            Location:
              $ref: '#/components/schemas/CreatedResponseHeader'
  /discord/servers/{guildId}/marketplaces/channels/{marketplaceChannelId}:
    get:
      summary: 'Get specific marketplace channel for this Discord server'
      operationId: getMarketplaceChannel
      tags:
        - discord
        - marketplace
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/MarketplaceChannelIdPathParameter'
      responses:
        '200':
          description: 'The poll with the specified ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordMarketplaceChannel'
    delete:
      summary: Remove a marketplace channel from this Discord server
      operationId: deleteMarketplaceChannel
      tags:
        - discord
        - marketplace
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/MarketplaceChannelIdPathParameter'
      responses:
        '204':
          description: Successful deletion
  /discord/servers/{guildId}/whitelists:
    post:
      summary: Add a whitelist for owners of a specific role to this server
      operationId: addWhitelist
      tags:
        - discord
        - whitelist
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Whitelist'
      responses:
        '201':
          description: 'Whitelist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Whitelist'
          headers:
            Location:
              $ref: '#/components/schemas/CreatedResponseHeader'
  /discord/servers/{guildId}/whitelists/shared:
    get:
      summary: Get external whitelists shared with this Discord server
      operationId: getSharedWhitelists
      tags:
        - discord
        - whitelist
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - name: withSignups
          in: query
          description: If signups should be included
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: All whitelists shared with this server
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SharedWhitelist'
  /discord/servers/{guildId}/whitelists/{whitelistId}:
    patch:
      summary: Update a whitelist on this discord server
      operationId: updateWhitelist
      tags:
        - discord
        - whitelist
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/WhitelistIdPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WhitelistPartial'
      responses:
        '200':
          description: Successful update, new whitelist content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Whitelist'
    delete:
      summary: Remove a whitelist from this discord server
      operationId: deleteWhitelist
      tags:
        - discord
        - whitelist
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/WhitelistIdPathParameter'
      responses:
        '204':
          description: Successful deletion
  /discord/servers/{guildId}/whitelists/{whitelistId}/signups:
    get:
      summary: 'Get signups for a whitelist'
      operationId: getWhitelistSignups
      tags:
        - discord
        - whitelist
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/WhitelistIdOrNamePathParameter'
      responses:
        '200':
          description: 'All signups for this whitelist'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WhitelistSignup'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Sign up for a whitelist
      operationId: addWhitelistSignup
      tags:
        - discord
        - whitelist
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/WhitelistIdPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WhitelistSignup'
      responses:
        '201':
          description: 'Whitelist signup information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WhitelistSignup'
          headers:
            Location:
              $ref: '#/components/schemas/CreatedResponseHeader'
        '400':
          description: 'Failed signup due to conditions not being met'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /discord/servers/{guildId}/whitelists/{whitelistId}/signups/{externalAccountId}:
    get:
      summary: Get the whitelist signup for a specific external account for this Discord server
      operationId: getWhitelistSignup
      tags:
        - discord
        - whitelist
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/WhitelistIdPathParameter'
        - $ref: '#/components/parameters/ExternalAccountPathParameter'
      responses:
        '200':
          description: 'Whitelist signup information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WhitelistSignup'
        '404':
          description: 'No whitelist signup for this external account present'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Remove a whitelist signup from this discord server
      operationId: deleteWhitelistSignup
      tags:
        - discord
        - whitelist
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/WhitelistIdPathParameter'
        - $ref: '#/components/parameters/ExternalAccountPathParameter'
      responses:
        '204':
          description: Successful deletion
  /discord/servers/{guildId}/settings/{settingName}:
    put:
      summary: Create or update a guild setting with the provided value
      operationId: updateSetting
      tags:
        - discord
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/SettingNamePathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddableSetting'
      responses:
        '200':
          description: 'Token Policy'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddableSetting'
    delete:
      summary: 'Delete guild setting by Name'
      operationId: deleteSetting
      tags:
        - discord
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
        - $ref: '#/components/parameters/SettingNamePathParameter'
      responses:
        '204':
          description: 'Successful deletion'
  /discord/servers/{guildId}/accesstoken:
    post:
      summary: Generate (or regenerate) the API access token for this Discord server for the external HAZELnet API
      operationId: regenerateAccessToken
      tags:
        - discord
        - security
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
      responses:
        '201':
          description: 'Access token to use with authorization header in external API'
          content:
            application/json:
              schema:
                type: string
          headers:
            Location:
              $ref: '#/components/schemas/CreatedResponseHeader'
    delete:
      summary: Delete the currently active access token for this Discord server
      operationId: deleteAccessToken
      tags:
        - discord
        - security
      parameters:
        - $ref: '#/components/parameters/GuildIdPathParameter'
      responses:
        '204':
          description: Successful deletion
  /discord/polls/announcements:
    get:
      summary: Get all polls that have announcements that are due to be posted
      operationId: listAnnouncablePolls
      tags:
        - discord
        - polls
      responses:
        '200':
          description: 'List of servers and corresponding polls to announce'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordPollUpdate'
  /discord/polls/resultupdates:
    get:
      summary: Get all polls that have result updates to edit existing messages
      operationId: listPollsToBeAnnounced
      tags:
        - discord
        - polls
      responses:
        '200':
          description: 'List of servers and corresponding polls to update the results for'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordPollUpdate'
components:
  parameters:
    AccountIdPathParameter:
      name: accountId
      in: path
      description: The account ID
      required: true
      style: simple
      example: 12
      schema:
        type: integer
        format: int64
    GuildIdPathParameter:
      name: guildId
      in: path
      description: The Discord Server's Guild ID
      required: true
      style: simple
      schema:
        $ref: '#/components/schemas/DiscordGuild'
    DiscordUserIdPathParameter:
      name: discordUserId
      in: path
      description: The Discord Users's ID
      required: true
      style: simple
      schema:
        $ref: '#/components/schemas/DiscordUser'
    PingIdPathParameter:
      name: pingId
      in: path
      description: The ping ID
      required: true
      style: simple
      example: 2
      schema:
        type: integer
        format: int64
    PolicyIdPathParameter:
      name: policyId
      in: path
      description: The Policy ID
      required: true
      style: simple
      schema:
        $ref: '#/components/schemas/TokenPolicyId'
    PoolHashPathParameter:
      name: poolHash
      in: path
      description: The Stakepool hash
      required: true
      style: simple
      schema:
        $ref: '#/components/schemas/StakepoolHash'
    DelegatorRoleIdPathParameter:
      name: delegatorRoleId
      in: path
      description: The ID of this delegator role assignment
      required: true
      style: simple
      example: 235
      schema:
        type: integer
        format: int64
    TokenRoleIdPathParameter:
      name: tokenRoleId
      in: path
      description: The ID of this token role assignment
      required: true
      style: simple
      example: 155
      schema:
        type: integer
        format: int64
    TokenRoleFilterIdPathParameter:
      name: filterId
      in: path
      description: The ID of this token role assignments filter
      required: true
      style: simple
      example: 2
      schema:
        type: integer
        format: int64
    PollIdPathParameter:
      name: pollId
      in: path
      description: The ID of this poll
      required: true
      style: simple
      example: 6121
      schema:
        type: integer
        format: int64
    ProductIdPathParameter:
      name: productId
      in: path
      description: The ID of this product
      required: true
      style: simple
      example: 62362
      schema:
        type: integer
        format: int64
    ClaimListIdPathParameter:
      name: claimListId
      in: path
      description: The ID of this claim list
      required: true
      style: simple
      example: 4144
      schema:
        type: integer
        format: int64
    ClaimListIdOrNamePathParameter:
      name: claimListIdOrName
      in: path
      description: The ID or name of this claim list
      required: true
      style: simple
      examples:
        string:
          summary: Claim list name as string
          value: my-list-name
        number:
          summary: Claim list ID
          value: 231
      schema:
        type: string
    OrderIdPathParameter:
      name: orderId
      in: path
      description: The ID of this order
      required: true
      style: simple
      example: 44
      schema:
        type: integer
        format: int64
    MarketplaceChannelIdPathParameter:
      name: marketplaceChannelId
      in: path
      description: The ID of the marketplace channel info
      required: true
      style: simple
      example: 85
      schema:
        type: integer
        format: int64
    WhitelistIdPathParameter:
      name: whitelistId
      in: path
      description: The ID of this whitelist
      required: true
      style: simple
      example: 231
      schema:
        type: integer
        format: int64
    WhitelistIdOrNamePathParameter:
      name: whitelistId
      in: path
      description: The ID or name of this whitelist
      required: true
      style: simple
      examples:
        string:
          summary: Whitelist name as string
          value: my-list-name
        number:
          summary: Whitelist ID
          value: 231
      schema:
        type: string
    SettingNamePathParameter:
      name: settingName
      in: path
      required: true
      style: simple
      example: WHITELISTED_GUILDS
      schema:
        type: string
    VerificationPathParameter:
      name: verificationId
      in: path
      description: The ID of the verification
      required: true
      style: simple
      schema:
        type: integer
        format: int64
    ExternalAccountPathParameter:
      name: externalAccountId
      in: path
      description: The ID of the external account
      required: true
      style: simple
      schema:
        type: integer
        format: int64
  schemas:
    GlobalSetting:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
          pattern: '^[_A-Za-z0-9]+$'
        value:
          type: string
      example:
        name: WHITELISTED_GUILDS
        value: '717264144759390238'
    Account:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/AccountId'
        settings:
          type: object
          additionalProperties:
            type: string
    ExternalAccount:
      type: object
      required:
        - type
        - referenceId
      properties:
        id:
          $ref: '#/components/schemas/ExternalAccountId'
        registrationTime:
          readOnly: true
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
        type:
          $ref: '#/components/schemas/ExternalAccountType'
        referenceId:
          type: string
          minLength: 1
          maxLength: 200
        referenceName:
          type: string
          maxLength: 200
        account:
          type: integer
          format: int64
        premium:
          type: boolean
          default: false
    ExternalAccountPremiumInfo:
      type: object
      properties:
        discordServers:
          type: array
          items:
            type: string
          readOnly: true
        stakeAmount:
          type: integer
          format: int64
          readOnly: true
        tokenBalance:
          type: integer
          format: int64
          readOnly: true
    VerificationImport:
      type: object
      required:
        - id
        - type
        - referenceId
        - address
        - source
      properties:
        id:
          readOnly: true
          type: integer
          example: 162
          format: int64
        type:
          $ref: '#/components/schemas/ExternalAccountType'
        referenceId:
          type: string
          minLength: 1
          maxLength: 200
        address:
          $ref: '#/components/schemas/WalletAddress'
        source:
          type: string
          minLength: 1
          maxLength: 50
    VerificationRequest:
      type: object
      required:
        - blockchain
        - address
        - externalAccountId
      properties:
        blockchain:
          $ref: '#/components/schemas/BlockchainType'
        address:
          $ref: '#/components/schemas/WalletAddress'
        externalAccountId:
          type: integer
          format: int64
    Verification:
      type: object
      required:
        - blockchain
        - address
        - externalAccountId
        - amount
        - validAfter
        - validBefore
        - confirmed
        - obsolete
      properties:
        id:
          readOnly: true
          type: integer
          example: 1249010
          format: int64
        blockchain:
          $ref: '#/components/schemas/BlockchainType'
        address:
          $ref: '#/components/schemas/WalletAddress'
        externalAccountId:
          type: integer
          format: int64
        amount:
          readOnly: true
          type: integer
          format: int64
        validAfter:
          readOnly: true
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
        validBefore:
          readOnly: true
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
        confirmed:
          readOnly: true
          type: boolean
        confirmedAt:
          readOnly: true
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
        obsolete:
          readOnly: true
          type: boolean
    IncomingDiscordPaymentRequest:
      type: object
      required:
        - refillAmount
      properties:
        refillAmount:
          type: integer
          format: int64
          example: 10000000
    IncomingDiscordPayment:
      type: object
      required:
        - discordServerId
        - receivingAddress
        - amount
        - validAfter
        - validBefore
      properties:
        id:
          readOnly: true
          type: integer
          example: 1249010
          format: int64
        receivingAddress:
          readOnly: true
          $ref: '#/components/schemas/WalletAddress'
        amount:
          readOnly: true
          type: integer
          format: int64
        validAfter:
          readOnly: true
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
        validBefore:
          readOnly: true
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
    ExternalAccountPing:
      type: object
      required:
        - sender
        - recipientAddress
      properties:
        id:
          readOnly: true
          type: integer
          format: int64
        sender:
          $ref: '#/components/schemas/ExternalAccountId'
        senderLocal:
          type: string
          description: The senders ID in the format corresponding to the senders original channel (for example Discord)
        sentFromServer:
          $ref: '#/components/schemas/DiscordServerId'
        recipient:
          $ref: '#/components/schemas/AccountId'
        recipientLocal:
          type: string
          description: The recipient ID in the format corresponding to the senders current channel (for example Discord), if a recipient in the same realm is available.
        recipientAddress:
          oneOf:
            - $ref: '#/components/schemas/WalletAddress'
            - $ref: '#/components/schemas/StakeAddressView'
            - $ref: '#/components/schemas/AssetFingerprint'
            - $ref: '#/components/schemas/HandleWithPrefix'
        senderMessage:
          type: string
          maxLength: 320
        createTime:
          readOnly: true
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
        sentTime:
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
        reported:
          type: boolean
    ExternalAccountPingPartial:
      type: object
      properties:
        sentTime:
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
        reported:
          type: boolean
    ClaimList:
      type: object
      required:
        - name
        - displayName
        - claims
      properties:
        id:
          readOnly: true
          type: integer
          format: int64
        name:
          type: string
          pattern: '^[A-Za-z][-A-Za-z0-9]{0,29}$'
        displayName:
          type: string
          minLength: 1
          maxLength: 256
        description:
          type: string
          maxLength: 2000
        createTime:
          readOnly: true
          type: string
          format: date-time
          example: 2021-11-10T12:21:43Z
        claims:
          type: array
          items:
            $ref: '#/components/schemas/ClaimListSnapshotEntry'
    ClaimListSnapshotEntry:
      type: object
      required:
        - stakeAddress
        - claimableProduct
        - claimableCount
      properties:
        stakeAddress:
          $ref: '#/components/schemas/StakeAddressView'
        claimableProduct:
          type: integer
          format: int64
        claimableCount:
          type: integer
          format: int64
        orderId:
          description: Order ID this snapshot entry was claimed with
          readOnly: true
          type: integer
          format: int64
    PhysicalOrder:
      type: object
      required:
        - externalAccountId
        - country
        - zipCode
        - city
        - street
        - items
      properties:
        id:
          readOnly: true
          type: integer
          format: int64
        externalAccountId:
          type: integer
          format: int64
        country:
          type: string
          example: Germany
          minLength: 1
          maxLength: 100
        zipCode:
          type: string
          example: 84323-2031
          minLength: 1
          maxLength: 30
        city:
          type: string
          example: Junkersdorf
          minLength: 1
          maxLength: 200
        street:
          type: string
          example: Burenstrasse 25
          minLength: 1
          maxLength: 500
        items:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/PhysicalOrderItem'
        processed:
          type: boolean
          readOnly: true
    PhysicalOrderItem:
      type: object
      required:
        - productId
        - count
      properties:
        productId:
          type: integer
          format: int64
        count:
          type: integer
          format: int64
    PhysicalProduct:
      type: object
      required:
        - name
      properties:
        id:
          readOnly: true
          type: integer
          format: int64
        name:
          type: string
          example: T-Shirt
        variations:
          type: object
          example:
            colors:
              - Green
              - Black
              - Red
            sizes:
              - S
              - M
              - L
              - XL
              - XXL
    ClaimListsWithProducts:
      type: object
      properties:
        claimLists:
          type: array
          items:
            $ref: '#/components/schemas/ClaimList'
        claimableProducts:
          type: array
          items:
            $ref: '#/components/schemas/PhysicalProduct'
    DiscordServer:
      type: object
      required:
        - guildId
        - guildName
        - guildOwner
        - guildMemberCount
      properties:
        id:
          $ref: '#/components/schemas/DiscordServerId'
        guildId:
          $ref: '#/components/schemas/DiscordGuild'
        guildName:
          type: string
          example: Guild Name
        guildOwner:
          $ref: '#/components/schemas/DiscordUser'
        joinTime:
          readOnly: true
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
        guildMemberCount:
          type: integer
          format: int32
          example: 150
        guildMemberUpdateTime:
          readOnly: true
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
        ownerAccount:
          type: integer
          format: int64
        premiumUntil:
          description: The latest time until this server will retain premium status
          readOnly: true
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
        premium:
          description: Does the discord server currently have an active premium subscription?
          readOnly: true
          type: boolean
        active:
          type: boolean
          description: If the bot is on or off. When the bot is removed from the guild or manually turned off by an admin this is false
        tokenPolicies:
          type: array
          items:
            $ref: '#/components/schemas/TokenPolicy'
        stakepools:
          type: array
          items:
            $ref: '#/components/schemas/Stakepool'
        delegatorRoles:
          type: array
          items:
            $ref: '#/components/schemas/DiscordDelegatorRole'
        tokenRoles:
          type: array
          items:
            $ref: '#/components/schemas/DiscordTokenRole'
        settings:
          type: object
          additionalProperties:
            type: string
    DiscordServerPartial:
      type: object
      properties:
        guildName:
          type: string
          example: Guild Name
        guildOwner:
          $ref: '#/components/schemas/DiscordUser'
        guildMemberCount:
          type: integer
          format: int32
          example: 150
        active:
          type: boolean
          description: Toggle the bot on or off - usually when the bot is removed from the guild or manually turned off by an admin
    DiscordServerPremiumInfo:
      type: object
      readOnly: true
      properties:
        totalDelegation:
          description: The total delegation amount from pledged members of this Discord server (in Lovelace)
          type: integer
          format: int64
        maxDelegation:
          description: The delegation amount needed to get the bot for free (in Lovelace)
          type: integer
          format: int64
        monthlyCost:
          description: The monthly subscription cost for this server, based on server member count without delegation discount (in Lovelace)
          type: integer
          format: int64
        actualMonthlyCost:
          description: The monthly subscription cost for this server, based on server member count with delegation discount (in Lovelace)
          type: integer
          format: int64
        guildMemberCount:
          description: The current member count (updated daily)
          type: integer
          format: int32
        remainingBalance:
          description: The current available balance for this Discord server (in Lovelace)
          type: integer
          format: int64
        lastBillingGuildMemberCount:
          description: The member count during the last billing
          type: integer
          format: int32
        lastBillingTime:
          description: The last time this account was billed
          type: string
          format: date-time
          example: 2021-11-10T12:21:43Z
        lastBillingAmount:
          description: The amount that was deducted from your balance in the last billing cycle (in Lovelace)
          type: integer
          format: int64
        premiumUntil:
          description: The expiration date of the premium account for this Discord server
          type: string
          format: date-time
          example: 2021-11-10T12:21:43Z
        currentPremium:
          description: Is the server currently a premium server?
          type: boolean
    TokenPolicy:
      type: object
      required:
        - policyId
        - projectName
      properties:
        policyId:
          $ref: '#/components/schemas/TokenPolicyId'
        projectName:
          type: string
          example: My First CNFT
    Stakepool:
      type: object
      required:
        - poolHash
      properties:
        poolHash:
          $ref: '#/components/schemas/StakepoolHash'
        info:
          $ref: '#/components/schemas/StakepoolInfo'
    StakepoolInfo:
      type: object
      required:
        - hash
        - view
        - ticker
        - name
      properties:
        hash:
          $ref: '#/components/schemas/StakepoolHash'
        view:
          type: string
        ticker:
          readOnly: true
          type: string
        name:
          readOnly: true
          type: string
        website:
          readOnly: true
          type: string
        description:
          readOnly: true
          type: string
    DiscordDelegatorRole:
      type: object
      required:
        - minimumStake
        - roleId
      properties:
        id:
          readOnly: true
          type: integer
          format: int64
        poolHash:
          $ref: '#/components/schemas/StakepoolHash'
        minimumStake:
          type: integer
          description: Minimum stake in Lovelace
          format: int64
          example: 1000000000
        roleId:
          $ref: '#/components/schemas/DiscordRole'
    DiscordTokenRole:
      type: object
      required:
        - acceptedAssets
        - minimumTokenQuantity
        - roleId
      properties:
        id:
          readOnly: true
          type: integer
          format: int64
        acceptedAssets:
          type: array
          minItems: 1
          maxItems: 50
          items:
            $ref: '#/components/schemas/TokenRoleAssetInfo'
        minimumTokenQuantity:
          type: integer
          format: int64
          example: 1
        maximumTokenQuantity:
          type: integer
          format: int64
          example: 10
        aggregationType:
          $ref: '#/components/schemas/TokenOwnershipAggregationType'
        filters:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/MetadataFilter'
        roleId:
          $ref: '#/components/schemas/DiscordRole'
    DiscordTokenRolePartial:
      type: object
      properties:
        acceptedAssets:
          type: array
          minItems: 1
          maxItems: 50
          items:
            $ref: '#/components/schemas/TokenRoleAssetInfo'
        minimumTokenQuantity:
          type: integer
          format: int64
          example: 1
        maximumTokenQuantity:
          type: integer
          format: int64
          example: 10
        aggregationType:
          $ref: '#/components/schemas/TokenOwnershipAggregationType'
        roleId:
          $ref: '#/components/schemas/DiscordRole'
    TokenOwnershipAggregationType:
      type: string
      default: ANY_POLICY_FILTERED_AND
      enum:
        - ANY_POLICY_FILTERED_AND
        - ANY_POLICY_FILTERED_OR
        - ANY_POLICY_FILTERED_ONE_EACH
        - EVERY_POLICY_FILTERED_OR
    TokenRoleAssetInfo:
      type: object
      required:
        - policyId
      properties:
        policyId:
          $ref: '#/components/schemas/TokenPolicyId'
        assetFingerprint:
          $ref: '#/components/schemas/AssetFingerprint'
    MetadataFilter:
      type: object
      required:
        - attributeName
        - operator
        - attributeValue
      properties:
        id:
          readOnly: true
          type: integer
          format: int64
        attributeName:
          type: string
          minLength: 1
          maxLength: 64
        operator:
          type: string
          enum:
            - EQUALS
            - NOTEQUALS
            - CONTAINS
            - NOTCONTAINS
            - STARTSWITH
            - ENDSWITH
        attributeValue:
          type: string
          minLength: 1
          maxLength: 128
    DiscordPoll:
      type: object
      required:
        - creator
        - name
        - displayName
        - description
        - openAfter
        - openUntil
        - options
      properties:
        id:
          readOnly: true
          type: integer
          format: int64
        creator:
          type: integer
          format: int64
        channelId:
          $ref: '#/components/schemas/DiscordChannel'
        messageId:
          $ref: '#/components/schemas/DiscordMessage'
        displayName:
          type: string
          minLength: 1
          maxLength: 256
        name:
          type: string
          pattern: '^[A-Za-z][-A-Za-z0-9]{0,29}$'
        description:
          type: string
          minLength: 1
          maxLength: 4096
        createTime:
          readOnly: true
          type: string
          format: date-time
          example: 2021-11-10T12:21:43Z
        openAfter:
          type: string
          format: date-time
          example: 2021-11-10T12:21:43Z
        openUntil:
          type: string
          format: date-time
          example: 2021-11-10T12:21:43Z
        resultsVisible:
          type: boolean
          default: true
        weighted:
          type: boolean
          default: false
        multipleVotes:
          type: boolean
          default: false
        archived:
          type: boolean
          default: false
        snapshotId:
          type: integer
          format: int64
        requiredRoles:
          type: array
          items:
            $ref: '#/components/schemas/DiscordPollRequiredRole'
        options:
          type: array
          items:
            $ref: '#/components/schemas/DiscordPollOption'
        voteaireUUID:
          type: string
          example: a7fbd4ca-950d-4d02-82fd-f9c6cc9e2165
          pattern: '[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$'
    DiscordPollPartial:
      type: object
      properties:
        channelId:
          $ref: '#/components/schemas/DiscordChannel'
        messageId:
          $ref: '#/components/schemas/DiscordMessage'
        displayName:
          type: string
          minLength: 1
          maxLength: 256
        description:
          type: string
          minLength: 1
          maxLength: 4096
        openAfter:
          type: string
          format: date-time
          example: 2021-11-10T12:21:43Z
        openUntil:
          type: string
          format: date-time
          example: 2021-11-10T12:21:43Z
        resultsVisible:
          type: boolean
        archived:
          type: boolean
        requiredRoles:
          type: array
          items:
            $ref: '#/components/schemas/DiscordPollRequiredRole'
    DiscordPollRequiredRole:
      type: object
      required:
        - roleId
      properties:
        roleId:
          $ref: '#/components/schemas/DiscordRole'
    DiscordPollOptionId:
      type: integer
      readOnly: true
      example: 4929
      format: int64
    DiscordPollOption:
      type: object
      required:
        - text
      properties:
        id:
          $ref: '#/components/schemas/DiscordPollOptionId'
        text:
          type: string
          example: 'Vote for the better one'
        reactionId:
          $ref: '#/components/schemas/DiscordEmoji'
        reactionName:
          type: string
          example: '🔥'
    VoteData:
      type: object
      required:
        - votes
      properties:
        votes:
          type: object
          description: A map of poll options the user chose (or 0 if not yet voted) and the respective amounts of votes given/available
          additionalProperties:
            type: integer
            format: int64
    DiscordPollVote:
      type: object
      required:
        - externalAccountId
        - optionId
      properties:
        externalAccountId:
          type: integer
          format: int64
        optionId:
          $ref: '#/components/schemas/DiscordPollOptionId'
        time:
          readOnly: true
          type: string
          format: date-time
          example: 2021-11-10T13:10:57Z
        weight:
          type: integer
          format: int64
    DiscordPollUpdate:
      type: object
      required:
        - guildId
        - pollId
        - channelId
      properties:
        guildId:
          $ref: '#/components/schemas/DiscordGuild'
        pollId:
          readOnly: true
          type: integer
          format: int64
        channelId:
          $ref: '#/components/schemas/DiscordChannel'
        messageId:
          $ref: '#/components/schemas/DiscordMessage'
    DiscordMarketplaceChannel:
      type: object
      required:
        - creator
        - type
        - channelId
        - policyId
        - marketplaces
      properties:
        id:
          readOnly: true
          type: integer
          format: int64
        creator:
          type: integer
          format: int64
        type:
          type: string
          enum:
            - SALES
            - MINT
        policyId:
          $ref: '#/components/schemas/TokenPolicyId'
        marketplaces:
          type: array
          items:
            $ref: '#/components/schemas/Marketplace'
          minItems: 1
        createTime:
          readOnly: true
          type: string
          format: date-time
          example: 2021-11-10T12:21:43Z
        channelId:
          $ref: '#/components/schemas/DiscordChannel'
        minimumValue:
          description: The (optional) minimum value in Lovelace that is required for the listing, sale or offer to be displayed
          type: integer
          format: int64
    Whitelist:
      type: object
      required:
        - displayName
        - name
        - creator
        - requiredRoleId
      properties:
        id:
          readOnly: true
          type: integer
          format: int64
        creator:
          type: integer
          format: int64
        createTime:
          readOnly: true
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
        displayName:
          type: string
          minLength: 1
          maxLength: 256
        name:
          type: string
          pattern: '^[A-Za-z][-A-Za-z0-9]{0,29}$'
        signupAfter:
          type: string
          format: date-time
          example: 2020-11-10T13:20:57Z
        signupUntil:
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
        launchDate:
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
        closed:
          type: boolean
          default: false
        requiredRoleId:
          $ref: '#/components/schemas/DiscordRole'
        sharedWithServer:
          type: integer
          format: int64
          description: The server ID (not guild ID) of another HAZELnet Discord server that you want to share the members of this whitelist with
        logoUrl:
          type: string
          minLength: 1
          maxLength: 1000
    WhitelistPartial:
      type: object
      properties:
        displayName:
          type: string
          minLength: 1
          maxLength: 256
        signupAfter:
          description: The date after which people can sign up for the whitelist (pass a date 20+ years in the past to remove the signupAfter date)
          type: string
          format: date-time
          example: 2020-11-10T13:20:57Z
        signupUntil:
          description: The date until which people can sign up for the whitelist (pass a date 20+ years in the past to remove the signupUntil date)
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
        closed:
          type: boolean
        sharedWithServer:
          type: integer
          format: int32
          description: The server ID (not guild ID) of another HAZELnet Discord server that you want to share the members of this whitelist with.
        launchDate:
          description: The date at which people can redeem their whitelist spot (pass a date 20+ years in the past to remove the launchDate date)
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
        logoUrl:
          type: string
          minLength: 1
          maxLength: 1000
    WhitelistSignup:
      type: object
      required:
        - externalAccountId
      properties:
        address:
          $ref: '#/components/schemas/WalletAddress'
        externalAccountId:
          type: integer
          format: int64
        signupTime:
          readOnly: true
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
    SharedWhitelist:
      type: object
      required:
        - guildId
        - guildName
        - whitelistName
        - whitelistDisplayName
        - signups
      properties:
        guildId:
          $ref: '#/components/schemas/DiscordGuild'
        guildName:
          type: string
          example: Guild Name
        whitelistDisplayName:
          type: string
          minLength: 1
          maxLength: 256
        whitelistName:
          type: string
          pattern: '^[A-Za-z][-A-Za-z0-9]{0,29}$'
        signups:
          type: array
          items:
            $ref: '#/components/schemas/WhitelistSignup'
    SummarizedWhitelistSignup:
      type: object
      required:
        - externalAccountId
        - guildId
        - guildName
        - whitelistDisplayName
        - signupTime
      properties:
        externalAccountId:
          readOnly: true
          type: integer
          format: int64
        guildId:
          readOnly: true
          $ref: '#/components/schemas/DiscordGuild'
        guildName:
          readOnly: true
          type: string
          example: Guild Name
        whitelistDisplayName:
          readOnly: true
          type: string
          minLength: 1
          maxLength: 256
        whitelistLogoUrl:
          readOnly: true
          type: string
          minLength: 1
          maxLength: 1000
        signupTime:
          readOnly: true
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
        launchDate:
          readOnly: true
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
    MultiAssetSnapshot:
      type: object
      required:
        - snapshotTime
        - policyId
      properties:
        id:
          readOnly: true
          type: integer
          format: int64
        createTime:
          readOnly: true
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
        snapshotTime:
          type: string
          format: date-time
          example: 2022-11-10T13:20:57Z
        policyId:
          $ref: '#/components/schemas/TokenPolicyId'
        assetFingerprint:
          $ref: '#/components/schemas/AssetFingerprint'
        taken:
          readOnly: true
          type: boolean
    EmbeddableSetting:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
          pattern: '^[_A-Za-z0-9]+$'
        value:
          type: string
      example:
        name: PROTECTION_ADDR_REMOVAL
        value: 'true'
    DiscordMember:
      type: object
      required:
        - externalAccountId
      properties:
        externalAccountId:
          type: integer
          format: int64
        joinTime:
          type: string
          format: date-time
          example: 2021-11-10T13:20:57Z
          readOnly: true
        premiumSupport:
          type: boolean
          default: false
    DiscordMemberPartial:
      type: object
      properties:
        premiumSupport:
          type: boolean
    DiscordRoleAssignment:
      type: object
      required:
        - guildId
        - userId
        - roleId
      properties:
        guildId:
          $ref: '#/components/schemas/DiscordGuild'
        userId:
          $ref: '#/components/schemas/DiscordUser'
        roleId:
          $ref: '#/components/schemas/DiscordRole'
    DiscordServerId:
      readOnly: true
      type: integer
      format: int64
    DiscordGuild:
      description: Snowflake ID matching a Discord guild
      type: integer
      format: int64
      example: 717264144759390238
    DiscordEmoji:
      description: Snowflake ID matching a Discord emoji
      type: integer
      format: int64
      example: 817564144253349412
    DiscordUser:
      description: Snowflake ID matching a Discord user
      type: integer
      format: int64
      example: 717264144735590
    DiscordRole:
      description: Snowflake ID matching a Discord role
      type: integer
      format: int64
      example: 185829035890290
    DiscordChannel:
      description: Snowflake ID matching a Discord channel
      type: integer
      format: int64
      example: 668289032310316
    DiscordMessage:
      description: Snowflake ID matching a Discord message
      type: integer
      format: int64
      example: 468589032310412
    StakeAddressView:
      type: string
      description: The staking address of a wallet, in viewable format
      example: stake1uyhvepgdsd7s07q5cdx9vdemnar4axpe0e9edw2chyd8dpgqnsffq
      pattern: '^stake1[a-zA-Z0-9]{53}$'
    StakepoolHash:
      type: string
      description: The Stakepool hash
      example: be80794a946cf5e578846fc81e3c62ac13f4ab3335e0f5dc046edad4
      pattern: '^[A-Za-z0-9]{56}$'
    TokenPolicyId:
      type: string
      description: The Policy ID
      example: ceb5dedd6cda3f0b4a98919b5d3827e15e324771642b57e0e6aabd57
      pattern: '^[A-Za-z0-9]{56}$'
    AssetFingerprint:
      type: string
      description: The fingerprint of an asset
      example: asset1ls9tt8s03x2gcqjyppx346ct64jts7fnwsmequ
      pattern: '^asset1[A-Za-z-0-9]{38}$'
    HandleWithPrefix:
      type: string
      example: $hazelnet
      pattern: '^\$[-._a-zA-Z0-9]{1,15}$'
    WalletAddress:
      type: string
      description: The wallet address (non-enterprise)
      example: addr1qxpc4jfv5qvcr3plf046u365urrmlcthqrpp34p3445lfu3wejzsmqmaqlupfs6v2cmnh868t6vrjljtj6u43wg6w6zs6v20aa
      pattern: '^addr1[A-Za-z-0-9]{98}$'
    Marketplace:
      type: string
      enum:
        - JPGSTORE
    AccountId:
      readOnly: true
      type: integer
      format: int64
    ExternalAccountId:
      readOnly: true
      type: integer
      format: int64
    ExternalAccountType:
      type: string
      enum:
        - DISCORD
    BlockchainType:
      type: string
      enum:
        - CARDANO
        - ETHEREUM
    CreatedResponseHeader:
      type: string
      format: uri
      description: URL of the newly created resource
    ErrorResponse:
      type: object
      required:
        - messages
        - httpStatus
        - httpStatusCode
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ErrorMessage'
        httpStatus:
          type: string
        httpStatusCode:
          type: integer
          format: int32
    ErrorMessage:
      type: object
      required:
        - message
      properties:
        message:
          type: string
        sourceField:
          type: string
